do while  not game:IsLoaded() do end local ContextActionService=game:GetService("ContextActionService");local TweenService=game:GetService("TweenService");local RunService=game:GetService("RunService");local Players=game:GetService("Players");local ReplicatedStorage=game:GetService("ReplicatedStorage");local VirtualUser=game:GetService("VirtualUser");local dispensers={"Honey Dispenser","Free Ant Pass Dispenser","Treat Dispenser","Blueberry Dispenser","Strawberry Dispenser","Free Royal Jelly Dispenser","Glue Dispenser","Coconut Dispenser","Free Robo Pass Dispenser"};local Masks={"Honey Mask","Fire Mask","Demon Mask"};local ceil=math.ceil;local huge=math.huge;local function getComponent(vector,axis) if (axis==1) then return vector.X;elseif (axis==2) then return vector.Y;else return vector.Z;end end local function getDistanceSquared(a,b) local dx=a.X-b.X ;local dy=a.Y-b.Y ;local dz=a.Z-b.Z ;return (dx * dx) + (dy * dy) + (dz * dz) ;end local function buildKDTree(points,depth,startIdx,endIdx) if ( not points or ( #points==0) or (startIdx>endIdx)) then return nil;end local axis=(depth%3) + 1 ;local subArray={};for i=startIdx,endIdx do subArray[(i-startIdx) + 1 ]=points[i];end table.sort(subArray,function(a,b) return getComponent(a.Position,axis)<getComponent(b.Position,axis) ;end);for i=startIdx,endIdx do points[i]=subArray[(i-startIdx) + 1 ];end local medianIdx=startIdx + ceil((endIdx-startIdx)/2 ) ;return {part=points[medianIdx],left=buildKDTree(points,depth + 1 ,startIdx,medianIdx-1 ),right=buildKDTree(points,depth + 1 ,medianIdx + 1 ,endIdx),axis=axis};end local function findNearest(tree,target,visited,bestNode,bestDistSq) if  not tree then return bestNode,bestDistSq;end if (tree.part and  not visited[tree.part]) then local currentDistSq=getDistanceSquared(tree.part.Position,target.Position);if (currentDistSq<bestDistSq) then bestNode=tree.part;bestDistSq=currentDistSq;end end if ( not tree.left and  not tree.right) then return bestNode,bestDistSq;end local targetVal=getComponent(target.Position,tree.axis);local nodeVal=getComponent(tree.part.Position,tree.axis);local firstBranch=((targetVal<nodeVal) and tree.left) or tree.right ;local secondBranch=((targetVal<nodeVal) and tree.right) or tree.left ;bestNode,bestDistSq=findNearest(firstBranch,target,visited,bestNode,bestDistSq);local axisDistSq=(targetVal-nodeVal) * (targetVal-nodeVal) ;if (axisDistSq<bestDistSq) then bestNode,bestDistSq=findNearest(secondBranch,target,visited,bestNode,bestDistSq);end return bestNode,bestDistSq;end local function sortPartsByProximity(parts,startPoint) if ( not parts or ( #parts==0)) then return {};end local pointsCopy={};local validCount=0;for i=1, #parts do if parts[i] then validCount=validCount + 1 ;pointsCopy[validCount]=parts[i];end end if (validCount==0) then return {};end local tree=buildKDTree(pointsCopy,0,1,validCount);local sorted={};local visited={};local current=startPoint or pointsCopy[1] ;local isStartPointInOriginal=false;if startPoint then for i=1,validCount do if (pointsCopy[i]==startPoint) then isStartPointInOriginal=true;break;end end else isStartPointInOriginal=true;end if isStartPointInOriginal then table.insert(sorted,current);end visited[current]=true;while  #sorted<validCount  do local nearest,_=findNearest(tree,current,visited,nil,huge);if  not nearest then break;end table.insert(sorted,nearest);visited[nearest]=true;current=nearest;end return sorted;end local env=getgenv();local funcs={};funcs.initialize=function(self) if ( not workspace:FindFirstChild("FieldDecos") or  not workspace:FindFirstChild("Decorations") or  not workspace:FindFirstChild("Gates") or  not workspace.Decorations:FindFirstChild("Misc")) then return;end local Hide={workspace.FieldDecos,workspace.Decorations.Misc,workspace.Gates,workspace.Collectibles};if ( #workspace.Bees:GetChildren()<=0) then local Hives=workspace.HivePlatforms;local Claimed={};for _,v in next,Hives:GetChildren() do if (v:FindFirstChild("PlayerRef") and v:FindFirstChild("Hive")) then if v.PlayerRef.Value then Claimed[string.sub(tostring(v.Hive.Value),5,5)]=true;else Claimed[string.sub(tostring(v.Hive.Value),5,5)]=false;end end end for i=6,1, -1 do if  not Claimed[tostring(i)] then game:GetService("ReplicatedStorage").Events.ClaimHive:FireServer(tonumber(i));end end end for _,v in pairs(Hide) do for _,k in v:GetDescendants() do if (k:IsA("Part") or k:IsA("UnionOperation") or k:IsA("MeshPart")) then if (k.Transparency~=1) then k.Transparency=1;end if k.CanCollide then k.CanCollide=false;end end end end for _,v in workspace.FlowerZones:GetChildren() do if (v.Size.Y<20) then v.Size=v.Size + Vector3.new(0,15,0) ;end end end;funcs.distance=function(self,v1,v2) return (v1-v2).Magnitude;end;funcs.getevent=function(self,method,t) if (method=="Equip") then game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ItemPackageEvent"):InvokeServer(method,t);end end;funcs.bodyclip=function(self,duration) local Noclip=Instance.new("BodyVelocity",game.Players.LocalPlayer.Character.HumanoidRootPart);Noclip.MaxForce=Vector3.new(999999,999999,999999);Noclip.P=100000;game['Debris']:AddItem(Noclip,duration);return Noclip;end;funcs.random_move=function(self,field) if  not Players.LocalPlayer.Character:FindFirstChild("Humanoid") then return;end Players.LocalPlayer.Character.Humanoid:MoveTo(funcs:getrandomposition(workspace.FlowerZones[field]) + (Vector3.new(0,Players.LocalPlayer.Character.HumanoidRootPart.Position.Y,0)/Vector3.new(1.5,1,1.5)) );task.wait(0.1);end;funcs.getrandomposition=function(self,object) local size=object.Size;local position=object.Position;local minX=position.X-(size.X/2) ;local maxX=position.X + (size.X/2) ;local minZ=position.Z-(size.Z/2) ;local maxZ=position.Z + (size.Z/2) ;local x=math.random(minX,maxX);local z=math.random(minZ,maxZ);return Vector3.new(x,0,z);end;funcs.collecttoken=function(self,self,array,field,method,duration) if ((field==nil) or (method==nil)) then return;end if ( #array<=0) then funcs:random_move(field);return;end local t={};local sortedParts=sortPartsByProximity(array,game.Players.LocalPlayer.Character.HumanoidRootPart);local success,err=pcall(function() for _,v in pairs(sortedParts) do if (self:getupvalues("autofarm_ignorehoneytoken") and ( not v.BrickColor==BrickColor.new("Flame yellowish orange"))) then local Reached=nil;local lplayer=game.Players.LocalPlayer;local Humanoid=lplayer.Character:FindFirstChildOfClass("Humanoid");local HumanoidRootPart=lplayer.Character:FindFirstChild("HumanoidRootPart");if  not (HumanoidRootPart and Humanoid and (Humanoid.Health>0)) then return;end if ( not (v.Transparency>=1) or (math.abs(v.Orientation.Z)<90) or (math.abs(v.Orientation.Z)>90)) then HumanoidRootPart.CFrame=CFrame.new(HumanoidRootPart.Position,Vector3.new(v.Position.X,HumanoidRootPart.Position.Y,v.Position.Z));Humanoid:MoveTo(Vector3.new(v.CFrame.Position.X,HumanoidRootPart.CFrame.Position.Y,v.CFrame.Position.Z));local connection;connection=Humanoid.MoveToFinished:Connect(function() Reached=true;if connection then connection:Disconnect();connection=nil;end end);local function handleMovement() local startTime=tick();while  not Reached and task.wait(1)  do if ((typeof(t)=="table") and (table.find(t,v)==nil) and  not ((math.abs(v.Orientation.Z)<90) or (math.abs(v.Orientation.Z)>90))) then table.insert(t,v);end if ( not (Humanoid and Humanoid.Parent) or (Humanoid.Health<=0) or (Humanoid.WalkToPoint~=v.Position) or Reached or  not env.Configs.autofarm or (v.Transparency>=1) or table.find(t,v)) then Reached=true;break;end if ( not funcs:inzone(field) and HumanoidRootPart and Humanoid and (Humanoid.Health~=0)) then funcs:teleport(HumanoidRootPart,workspace.FlowerZones[field].Position,method,funcs:distance(HumanoidRootPart.Position,workspace.FlowerZones[field].Position)/duration );end HumanoidRootPart.CFrame=CFrame.new(HumanoidRootPart.Position,Vector3.new(v.Position.X,HumanoidRootPart.Position.Y,v.Position.Z));Humanoid:MoveTo(Vector3.new(v.CFrame.Position.X,HumanoidRootPart.CFrame.Position.Y,v.CFrame.Position.Z));if ((tick() -startTime)>30) then Reached=true;break;end end if connection then connection:Disconnect();connection=nil;end end task.spawn(handleMovement);while  not Reached and env.Configs.autofarm and task.wait()  do end else funcs:random_move(field);HumanoidRootPart.CFrame=CFrame.new(HumanoidRootPart.Position,Vector3.new(v.Position.X,HumanoidRootPart.Position.Y,v.Position.Z));table.insert(t,v);end end end end);table.clear(t);t=nil;if  not success then warn("Error in collecttoken: "   .. tostring(err) );end end;funcs.inzone=function(self,field) if  not field then return;end local Zone=workspace.FlowerZones[field];local HumanoidRootPart=game.Players.LocalPlayer.Character.HumanoidRootPart;return (HumanoidRootPart.Position.X>=(Zone.Position.X-(Zone.Size.X/2))) and (HumanoidRootPart.Position.X<=(Zone.Position.X + (Zone.Size.X/2))) and (HumanoidRootPart.Position.Y>=(Zone.Position.Y-(Zone.Size.Y/2))) and (HumanoidRootPart.Position.Z>=(Zone.Position.Z-(Zone.Size.Z/2))) and (HumanoidRootPart.Position.Z<=(Zone.Position.Z + (Zone.Size.Z/2))) ;end;funcs.gettokenlist=function(self,array,field) if  not field then return {};end local Zone=workspace.FlowerZones[field];local v1,v2=Zone.Position-(Zone.Size/2) ,Zone.Position + (Zone.Size/2) ;return workspace:FindPartsInRegion3WithWhiteList(Region3.new(v1,v2),array,math.huge);end;funcs.convert=function(self,self) self:setupvalues("autofarm_isfull",true);if self:getupvalues("autofarm_vicious_detected") then return;end if self:getupvalues("autofarm_converthoneymask") then funcs:getevent("Equip",{Category="Accessory",Type="Honey Mask"});end while env.Configs.autofarm and self:getupvalues("autofarm_isfull") and task.wait(2)  do local corestats=game.Players.LocalPlayer.CoreStats;local HumanoidRootPart=game.Players.LocalPlayer.Character.HumanoidRootPart;local spawnPos=(Players.LocalPlayer.SpawnPos and Players.LocalPlayer.SpawnPos.Value and Players.LocalPlayer.SpawnPos.Value.Position) or Players.LocalPlayer.Character.HumanoidRootPart.Position ;if (funcs:distance(HumanoidRootPart.Position,spawnPos)<=5) then if ((Players.LocalPlayer.PlayerGui.ScreenGui.ActivateButton.BackgroundColor3==Color3.fromRGB(50,131,255)) and (tonumber(corestats.Pollen.Value)>=tonumber(corestats.Capacity.Value))) then ReplicatedStorage.Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking");end else funcs:teleport(HumanoidRootPart,spawnPos,self:getupvalues("autofarm_method"),self:getupvalues("autofarm_metodd_duration"),{0,180,0});end if (Players.LocalPlayer.CoreStats.Pollen.Value<=0) then task.wait(7);self:setupvalues("autofarm_isfull",false);end end if ( #self:getupvalues("autofarm_maskselect")>0) then funcs:getevent("Equip",{Category="Accessory",Type=self:getupvalues("autofarm_maskselect")});end end;funcs.teleport=function(self,object,targetobjectposition,method,duration,angles) local rad=((typeof(angles)=="table") and {math.rad(angles[1] or 0 ),math.rad(angles[2] or 0 ),math.rad(angles[3] or 0 )}) or {0,0,0} ;if (method=="tween") then local targetCFrame=CFrame.new(targetobjectposition) * CFrame.fromEulerAnglesXYZ(rad[1],rad[2],rad[3]) ;local time=funcs:distance(object.Position,targetobjectposition)/duration ;local tweenInfo=TweenInfo.new(time or 1 ,Enum.EasingStyle.Linear,Enum.EasingDirection.Out);local tween=TweenService:Create(object,tweenInfo,{CFrame=targetCFrame});funcs:bodyclip(time);tween:Play();tween.Completed:Wait();elseif (method=="cframe") then object.CFrame=CFrame.new(targetobjectposition) * CFrame.fromEulerAnglesXYZ(rad[1],rad[2],rad[3]) ;end end;funcs.viciousfarm=function(self,self) if  not workspace.Particles:FindFirstChild("Vicious") then return;end local Vicious=workspace.Particles:FindFirstChild("Vicious");local HumanoidRootPart=Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart");if  not HumanoidRootPart then return;end while task.wait(0.1) and self:getupvalues("autofarm_vicious_detected")  do if (funcs:distance(HumanoidRootPart.Position,Vicious.Position)<=30) then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame=workspace.Particles:FindFirstChild("Vicious").CFrame * CFrame.new(10,3,10) ;else funcs:teleport(Players.LocalPlayer.Character.HumanoidRootPart,Vicious.Position,self.autofarm_method,self.autofarm_metodd_duration);end end end;local module={};module.__index=module;module.new=function() local self=setmetatable({modulelib={},npcs={},autofarm_zones={},masks={},autofarm_isfull=false,autoconvert=nil,autofarm_field=nil,autofarm_method=nil,autofarm_metodd_duration=400,autofarm_antimob=nil,autofarm_converthoneymask=false,autofarm_maskselect=nil,autofarm_ignorehoneytoken=false,autofarm_vicious=false,autofarm_vicious_detected=false},module);self:initialize();return self;end;module.autodig=function(self,value) env.Configs.autodig=value;if  not env.Configs.autodig then return;end local start=tick();local Connection;Connection=RunService.Heartbeat:Connect(function() if (game:GetService("Players").LocalPlayer.CoreStats.Pollen.Value<game:GetService("Players").LocalPlayer.CoreStats.Capacity.Value) then if  not env.Configs.autodig then Connection:Disconnect();end if ((tick() -start)>=0.1) then game:GetService("ReplicatedStorage").Events.ToolCollect:FireServer();start=tick();return;end else return;end end);end;module.getvicious=function(self,value) env.Configs.vicious=value;if value then local Vicious=workspace.Particles:FindFirstChild("Vicious");local start=tick();local connection;connection=RunService.RenderStepped:Connect(function() if ( not env.Configs.autofarm or  not env.Configs.vicious) then self:setupvalues("autofarm_vicious_detected",false);connection:Disconnect();end if ((tick() -start)>=0.1) then self:setupvalues("autofarm_vicious_detected",Vicious or false );start=tick();end end);end end;module.autofarm=function(self,value) env.Configs.autofarm=value;while env.Configs.autofarm and task.wait(0.2)  do if (self.autofarm_field and self.autofarm_method and self.autofarm_maskselect) then end local corestats=game.Players.LocalPlayer.CoreStats;if ( not self.autofarm_isfull and  not (tonumber(corestats.Pollen.Value)>=tonumber(corestats.Capacity.Value))) then if  not self.autofarm_vicious_detected then if  not funcs:inzone(self.autofarm_field) then funcs:teleport(Players.LocalPlayer.Character.HumanoidRootPart,workspace.FlowerZones[self.autofarm_field].Position,self.autofarm_method,self.autofarm_metodd_duration);elseif self.autofarm_antimob then if ( #funcs:gettokenlist({workspace.Monsters},self.autofarm_field)>0) then game.Players.LocalPlayer.Character.Humanoid.Jump=true;task.wait(3);else funcs:collecttoken(self,funcs:gettokenlist({workspace.Collectibles},self.autofarm_field),self.autofarm_field,self.autofarm_method,self.autofarm_metodd_duration);end else funcs:collecttoken(self,funcs:gettokenlist({workspace.Collectibles},self.autofarm_field),self.autofarm_field,self.autofarm_method,self.autofarm_metodd_duration);end else funcs:viciousfarm(self);end else funcs:convert(self);end end end;module.claim_dispener=function(self) for _,v in next,dispensers do game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v);end end;module.claim_stickers=function(self) for i,v in next,workspace.HiddenStickers:GetChildren() do if ( #workspace.HiddenStickers:GetChildren()<=0) then return;end env['fireclickdetector'](workspace.HiddenStickers:GetChildren()[i].ClickDetector);end end;module.event=function(self,method,...) funcs:getevent(method,...);end;module.searchFirstMatch=function(self,array,query) if (type(query)~="string") then error("Error String");end local lowerQuery=string.lower(query);for _,item in ipairs(array) do if (type(item)=="string") then local lowerItem=string.lower(item);if string.find(lowerItem,lowerQuery,1,true) then return item;end end end return nil;end;module.antiafk=function(self,value) env.Configs.afk=value;local connection;connection=game.Players.LocalPlayer.Idled:Connect(function() if  not env.Configs.afk then connection:Disconnect();end VirtualUser:CaptureController();VirtualUser:ClickButton2(Vector2.new());end);end;module.getmodulelib=function(self,module) return self.modulelib[module];end;module.setupvalues=function(self,property,value) if (self[property]==value) then return;end self[property]=value;end;module.getupvalues=function(self,property) return self[property];end;module.initialize=function(self) env.Configs={};env.Connection={};for _,v in next,workspace.FlowerZones:GetChildren() do table.insert(self.autofarm_zones,tostring(v.Name));end funcs:initialize();self.masks=Masks;self.modulelib['Humanoid']=loadstring(game:HttpGet("https://raw.githubusercontent.com/getyournew/rbx/refs/heads/main/huamnoid"))().new();end;repeat task.wait();until game:IsLoaded() local module=setmetatable({},{__index=module,__metatable=""}).new();do if  not module then return;end end local Humanoid=module:getmodulelib("Humanoid");local Rayfield=loadstring(game:HttpGet("https://sirius.menu/rayfield"))();local Window=Rayfield:CreateWindow({Name="Rad X [Bee-Swarm-Simulator]",LoadingTitle="Loading...",LoadingSubtitle="",Theme="Amber Glow",DisableRayfieldPrompts=false,DisableBuildWarnings=false,ConfigurationSaving={Enabled=true,FolderName=nil,FileName="Big Hub"},Discord={Enabled=false,Invite="noinvitelink",RememberJoins=true},KeySystem=false,KeySettings={Title="Untitled",Subtitle="Key System",Note="No method of obtaining the key is provided",FileName="Key",SaveKey=true,GrabKeyFromSite=false,Key={"Hello"}}});local Tabs={Main=Window:CreateTab("< Main >",4483362458),Combat=Window:CreateTab("< Combat >",4483362458),Player=Window:CreateTab("< Player >",4483362458),Msic=Window:CreateTab("< Msic >",4483362458)};local Section=Tabs.Main:CreateSection("Auto Farm",false);local Dropdown=Tabs.Main:CreateDropdown({Name="Select Field",Options=module:getupvalues("autofarm_zones"),CurrentOption={""},MultipleOptions=false,Flag="Dropdown1",Callback=function(Options) module:setupvalues("autofarm_field",Options[1]);end});local Input;Input=Tabs.Main:CreateInput({Name="Search Field",CurrentValue="",PlaceholderText="",RemoveTextAfterFocusLost=true,Flag="Input1",Callback=function(Text) local res=module:searchFirstMatch(module:getupvalues("autofarm_zones"),tostring(Text));if  not res then return;end Dropdown:Set({res});end});local Dropdown=Tabs.Main:CreateDropdown({Name="Move Method",Options={"cframe","tween"},CurrentOption={""},MultipleOptions=false,Flag="Dropdown1",Callback=function(Options) module:setupvalues("autofarm_method",Options[1]);end});local Dropdown=Tabs.Main:CreateDropdown({Name="Select Farm Mask",Options=module:getupvalues("masks"),CurrentOption={""},MultipleOptions=false,Flag="Dropdown1",Callback=function(Options) module:setupvalues("autofarm_maskselect",Options[1]);module:event("Equip",{Category="Accessory",Type=Options[1]});end});local Slider=Tabs.Main:CreateSlider({Name="Tween Speed",Range={400,1000},Increment=10,Suffix="",CurrentValue=400,Flag="Slider1",Callback=function(Value) module:setupvalues("autofarm_metodd_duration",Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Auto Farm",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:autofarm(Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Anti-Mob",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:setupvalues("autofarm_antimob",Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Auto Dig",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:autodig(Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Anti-AFK",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:antiafk(Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Use Honey Mask When Convert",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:setupvalues("autofarm_converthoneymask",Value);end});local Toggle=Tabs.Main:CreateToggle({Name="Ignore Honey Token",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:setupvalues("autofarm_ignorehoneytoken",Value);end});local Toggle=Tabs.Combat:CreateToggle({Name="Vicious Bee",CurrentValue=false,Flag="Toggle1",Callback=function(Value) module:getvicious(Value);end});local Toggle=Tabs.Player:CreateToggle({Name="Infinity Jump",CurrentValue=false,Flag="Toggle1",Callback=function(Value) Humanoid:infinityjump(Value);end});local Section=Tabs.Player:CreateSection("WalkSpeed",false);local Slider=Tabs.Player:CreateSlider({Name="WalkSpeed",Range={0,100},Increment=1,Suffix="",CurrentValue=16,Flag="Slider1",Callback=function(Value) Humanoid:upvalues("WalkSpeed",Value);end});local Toggle=Tabs.Player:CreateToggle({Name="Enable",CurrentValue=false,Flag="Toggle1",Callback=function(Value) Humanoid:setupvalues(Value,"WalkSpeed",Humanoid['WalkSpeed']);end});local Section=Tabs.Player:CreateSection("WalkSpeed Custom",false);local Dropdown=Tabs.Player:CreateDropdown({Name="Method",Options={"Velocity","Vector","CFrame"},CurrentOption={"None"},MultipleOptions=false,Flag="Dropdown1",Callback=function(Options) Humanoid:upvalues("customspeed_method",Options[1]);end});local Slider=Tabs.Player:CreateSlider({Name="WalkSpeed",Range={5,50},Increment=1,Suffix="",CurrentValue=15,Flag="Slider1",Callback=function(Value) Humanoid:upvalues("customspeed_value",Value);end});local Toggle=Tabs.Player:CreateToggle({Name="Enable",CurrentValue=false,Flag="Toggle1",Callback=function(Value) Humanoid:walkspeedcustom(Value);end});local Button=Tabs.Msic:CreateButton({Name="Claim Dispener",Callback=function() module:claim_dispener();end});local Button=Tabs.Msic:CreateButton({Name="Claim Stickers",Callback=function() module:claim_stickers();end}); end
